#include <stdio.h> 
#include <stdlib.h> 
 
// Define a Stack 
typedef struct Stack { 
    unsigned capacity; 
    int top; 
    int *array; 
} Stack; 
 
Stack* createStack(unsigned capacity) { 
    Stack* stack = (Stack*) malloc(sizeof(Stack)); 
    stack->capacity = capacity; 
    stack->top = -1; 
    stack->array = (int*) malloc(stack->capacity * sizeof(int)); 
    return stack; 
} 
 
int isFull(Stack* stack) { 
    return (stack->top == stack->capacity - 1); 
} 
 
int isEmpty(Stack* stack) { 
    return (stack->top == -1); 
} 
 
void push(Stack* stack, int item) { 
    if (isFull(stack)) return; 
    stack->array[++stack->top] = item; 
} 
 
int pop(Stack* stack) { 
    if (isEmpty(stack)) return -1; 
    return stack->array[stack->top--]; 
} 
 
void moveDisksBetweenTwoPoles(Stack *src, Stack *dest, char s, char d) { 
    int pole1TopDisk = isEmpty(src) ? -1 : pop(src); 
    int pole2TopDisk = isEmpty(dest) ? -1 : pop(dest); 
 
    // When pole 1 is empty 
    if (pole1TopDisk == -1) { 
        push(src, pole2TopDisk); 
        printf("Move disk %d from %c to %c\n", pole2TopDisk, d, s); 
    } 
    // When pole2 pole is empty 
    else if (pole2TopDisk == -1) { 
        push(dest, pole1TopDisk); 
        printf("Move disk %d from %c to %c\n", pole1TopDisk, s, d); 
    } 
    // When top disk of pole1 > top disk of pole2 
    else if (pole1TopDisk > pole2TopDisk) { 
        push(src, pole1TopDisk); 
        push(src, pole2TopDisk); 
        printf("Move disk %d from %c to %c\n", pole2TopDisk, d, s); 
    } 
    // When top disk of pole1 < top disk of pole2 
    else { 
        push(dest, pole2TopDisk); 
        push(dest, pole1TopDisk); 
        printf("Move disk %d from %c to %c\n", pole1TopDisk, s, d); 
    } 
} 
 
void tohUsingStacks(int num_of_disks, Stack *src, Stack *aux, Stack *dest) { 
    int i, total_moves; 
    char s = 'S', d = 'D', a = 'A'; 
 
    //If number of disks is even, then interchange 
    // destination pole and auxiliary pole 
    if (num_of_disks % 2 == 0) { 
        char temp = d; 
        d = a; 
        a = temp; 
    } 
 
    total_moves = (1 << num_of_disks) - 1; 
 
    // Larger disks will be pushed first 
    for (i = num_of_disks; i >= 1; i--) 
        push(src, i); 
 
    for (i = 1; i <= total_moves; i++) { 
        if (i % 3 == 1) 
            moveDisksBetweenTwoPoles(src, dest, s, d); 
        else if (i % 3 == 2) 
            moveDisksBetweenTwoPoles(src, aux, s, a); 
        else if (i % 3 == 0) 
            moveDisksBetweenTwoPoles(aux, dest, a, d); 
    } 
} 
 
int main() { 
    int num_of_disks; 
    printf("Enter the number of disks: "); 
    scanf("%d", &num_of_disks); 
 
    Stack *src, *dest, *aux; 
 
    // Create three stacks of size 'num_of_disks' 
    // to hold the disks 
    src = createStack(num_of_disks); 
    aux = createStack(num_of_disks); 
    dest = createStack(num_of_disks); 
 
    tohUsingStacks(num_of_disks, src, aux, dest); 
    return 0; 
}
